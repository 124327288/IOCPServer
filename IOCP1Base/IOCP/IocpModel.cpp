#include "IocpModel.h"

#pragma comment(lib, "WS2_32.lib")

CIocpModel::CIocpModel(void) :
	m_nThreads(0),
	m_hShutdownEvent(nullptr),
	m_hIOCompletionPort(nullptr),
	m_phWorkerThreads(nullptr),
	m_strIP(DEFAULT_IP),
	m_nPort(DEFAULT_PORT),
	m_lpfnAcceptEx(nullptr),
	m_lpfnGetAcceptExSockAddrs(nullptr),
	m_pListenContext(nullptr),
	acceptedCount(0),
	connectCount(0)
{
	m_LogFunc = nullptr;
	this->LoadSocketLib();
}

CIocpModel::~CIocpModel(void)
{
	// 确保资源彻底释放
	this->Stop();
	this->UnloadSocketLib();
}

///////////////////////////////////////////////////////////////////
// 工作者线程： 为IOCP请求服务的工作者线程
// 也就是每当完成端口上出现了完成数据包，就将之取出来进行处理的线程
///////////////////////////////////////////////////////////////////
/*********************************************************************
*函数功能：线程函数，根据GetQueuedCompletionStatus返回情况进行处理；
*函数参数：lpParam是THREADPARAMS_WORKER类型指针；
*函数说明：GetQueuedCompletionStatus正确返回时表示某操作已经完成，
	第二个参数lpNumberOfBytes表示本次套接字传输的字节数，
参数lpCompletionKey和lpOverlapped包含重要的信息，请查询MSDN文档；
*********************************************************************/
DWORD WINAPI CIocpModel::_WorkerThread(LPVOID lpParam)
{
	WorkerThreadParam* pParam = (WorkerThreadParam*)lpParam;
	CIocpModel* pIocpModel = (CIocpModel*)pParam->pIocpModel;
	const int nThreadNo = pParam->nThreadNo;
	const int nThreadId = pParam->nThreadId;

	pIocpModel->_ShowMessage("工作者线程，No:%d, ID:%d.", nThreadNo, nThreadId);
	//循环处理请求，直到接收到Shutdown信息为止
	while (WAIT_OBJECT_0 != WaitForSingleObject(pIocpModel->m_hShutdownEvent, 0))
	{
		DWORD dwBytesTransfered = 0;
		OVERLAPPED* pOverlapped = nullptr;
		SocketContext* pSocketContext = nullptr;
		const BOOL bRet = GetQueuedCompletionStatus(pIocpModel->m_hIOCompletionPort,
			&dwBytesTransfered, (PULONG_PTR)&pSocketContext, &pOverlapped, INFINITE);
		//接收EXIT_CODE退出标志，则直接退出
		if (EXIT_CODE == (DWORD)pSocketContext)
		{
			break;
		}
		if (!bRet)
		{	//返回值为false，表示出错
			const DWORD dwErr = GetLastError();
			// 显示一下提示信息
			if (!pIocpModel->HandleError(pSocketContext, dwErr))
			{
				break;
			}
			continue;
		}
		else
		{
			// 读取传入的参数
			IoContext* pIoContext = CONTAINING_RECORD(pOverlapped,
				IoContext, m_Overlapped);
			// 判断是否有客户端断开了
			if ((0 == dwBytesTransfered)
				&& (OPERATION_TYPE::RECV == pIoContext->m_OpType
					|| OPERATION_TYPE::SEND == pIoContext->m_OpType))
			{
				pIocpModel->OnConnectionClosed(pSocketContext);
				pIocpModel->_ShowMessage("客户端 %s:%d 断开连接.",
					inet_ntoa(pSocketContext->m_ClientAddr.sin_addr),
					ntohs(pSocketContext->m_ClientAddr.sin_port));
				// 释放掉对应的资源
				pIocpModel->_DoClose(pSocketContext);
				continue;
			}
			else
			{
				switch (pIoContext->m_OpType)
				{
				case OPERATION_TYPE::ACCEPT:
				{
					// 为了增加代码可读性，这里用专门的_DoAccept函数进行处理连入请求
					pIoContext->m_nTotalBytes = dwBytesTransfered;
					pIocpModel->_DoAccept(pSocketContext, pIoContext);
				}
				break;

				case OPERATION_TYPE::RECV:
				{
					// 为了增加代码可读性，这里用专门的_DoRecv函数进行处理接收请求
					pIoContext->m_nTotalBytes = dwBytesTransfered;
					pIocpModel->_DoRecv(pSocketContext, pIoContext);
				}
				break;

				// 这里略过不写了，要不代码太多了，不容易理解，Send操作相对来讲简单一些
				case OPERATION_TYPE::SEND:
				{
					pIocpModel->_DoSend(pSocketContext, pIoContext);
				}
				break;
				default:
					// 不应该执行到这里
					pIocpModel->_ShowMessage("_WorkThread中的m_OpType 参数异常.\n");
					break;
				} //switch
			}//if
		}//if
	}//while
	pIocpModel->_ShowMessage("工作者线程 %d 号退出.\n", nThreadNo);
	// 释放线程参数
	RELEASE_POINTER(lpParam);
	return 0;
}

//================================================================================
//				 系统初始化和终止
//================================================================================
////////////////////////////////////////////////////////////////////
// 初始化WinSock 2.2
//函数功能：初始化套接字
bool CIocpModel::LoadSocketLib()
{
	WSADATA wsaData = { 0 };
	const int nRet = WSAStartup(MAKEWORD(2, 2), &wsaData);
	// 错误(一般都不可能出现)
	if (NO_ERROR != nRet)
	{
		this->_ShowMessage("初始化WinSock 2.2失败！\n");
		return false;
	}
	return true;
}

//函数功能：启动服务器
bool CIocpModel::Start()
{
	// 初始化线程互斥量
	InitializeCriticalSection(&m_csContextList);
	// 建立系统退出的事件通知
	m_hShutdownEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	// 初始化IOCP
	if (!_InitializeIOCP())
	{
		this->_ShowMessage("初始化IOCP失败！\n");
		return false;
	}
	else
	{
		this->_ShowMessage("\nIOCP初始化完毕\n.");
	}
	// 初始化Socket
	if (!_InitializeListenSocket())
	{
		this->_ShowMessage("Listen Socket初始化失败！\n");
		this->_DeInitialize();
		return false;
	}
	else
	{
		this->_ShowMessage("Listen Socket初始化完毕.");
	}
	this->_ShowMessage("系统准备就绪，等候连接....\n");
	return true;
}

////////////////////////////////////////////////////////////////////
//	开始发送系统退出消息，退出完成端口和线程资源
void CIocpModel::Stop()
{
	if (m_pListenContext != nullptr
		&& m_pListenContext->m_Socket != INVALID_SOCKET)
	{
		// 激活关闭消息通知
		SetEvent(m_hShutdownEvent);
		for (int i = 0; i < m_nThreads; i++)
		{
			// 通知所有的完成端口操作退出
			PostQueuedCompletionStatus(m_hIOCompletionPort,
				0, (DWORD)EXIT_CODE, NULL);
		}
		// 等待所有的客户端资源退出
		WaitForMultipleObjects(m_nThreads, m_phWorkerThreads,
			TRUE, INFINITE);
		// 清除客户端列表信息
		this->_ClearContextList();
		// 释放其他资源
		this->_DeInitialize();
		this->_ShowMessage("停止监听\n");
	}
}

bool CIocpModel::SendData(SocketContext* pSocketContext, char* data, int size)
{
	this->_ShowMessage("SendData(): s=%p d=%p\n", pSocketContext, data);
	return false;
}

////////////////////////////////
// 初始化完成端口
bool CIocpModel::_InitializeIOCP()
{
	//If this parameter is zero, the system allows as many 
	//concurrently running threads as there are processors in the system.
	//如果此参数为零，则系统允许的并发运行线程数量与系统中的处理器数量相同。
	m_hIOCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE,
		nullptr, 0, 0); //NumberOfConcurrentThreads
	if (nullptr == m_hIOCompletionPort)
	{
		this->_ShowMessage("建立完成端口失败！错误代码: %d!\n", WSAGetLastError());
		return false;
	}
	// 根据本机中的处理器数量，建立对应的线程数
	m_nThreads = WORKER_THREADS_PER_PROCESSOR * _GetNumOfProcessors();
	// 为工作者线程初始化句柄
	m_phWorkerThreads = new HANDLE[m_nThreads];
	// 根据计算出来的数量建立工作者线程
	DWORD nThreadID = 0;
	for (int i = 0; i < m_nThreads; i++)
	{
		WorkerThreadParam* pThreadParams = new WorkerThreadParam;
		pThreadParams->pIocpModel = this;
		pThreadParams->nThreadNo = i + 1;
		m_phWorkerThreads[i] = ::CreateThread(0, 0, _WorkerThread,
			(void*)pThreadParams, 0, &nThreadID);
		pThreadParams->nThreadId = nThreadID;
	}
	this->_ShowMessage(" 建立 _WorkerThread %d 个.\n", m_nThreads);
	return true;
}

/////////////////////////////////////////////////////////////////
// 初始化Socket
bool CIocpModel::_InitializeListenSocket()
{
	// 生成用于监听的Socket的信息
	m_pListenContext = new SocketContext;

	// 需要使用重叠IO，必须得使用WSASocket来建立Socket，才可以支持重叠IO操作
	m_pListenContext->m_Socket = WSASocket(AF_INET, SOCK_STREAM,
		IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED);
	if (INVALID_SOCKET == m_pListenContext->m_Socket)
	{
		this->_ShowMessage("初始化Socket失败，错误代码: %d.\n", WSAGetLastError());
		this->_DeInitialize();
		return false;
	}
	else
	{
		this->_ShowMessage("WSASocket() 完成.\n");
	}

	// 将Listen Socket绑定至完成端口中
	if (NULL == CreateIoCompletionPort((HANDLE)m_pListenContext->m_Socket,
		m_hIOCompletionPort, (DWORD)m_pListenContext, 0))
	{
		this->_ShowMessage("绑定 Listen Socket至完成端口失败！错误代码: %d/n",
			WSAGetLastError());
		this->_DeInitialize();
		return false;
	}
	else
	{
		this->_ShowMessage("Listen Socket绑定完成端口 完成.\n");
	}

	// 填充地址信息
	// 服务器地址信息，用于绑定Socket
	sockaddr_in serverAddress;
	ZeroMemory((char*)&serverAddress, sizeof(serverAddress));
	serverAddress.sin_family = AF_INET;
	// 这里可以绑定任何可用的IP地址，或者绑定一个指定的IP地址 
	// ServerAddress.sin_addr.s_addr = inet_addr(m_strIP.c_str());
	serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);
	serverAddress.sin_port = htons(m_nPort);

	// 绑定地址和端口
	if (SOCKET_ERROR == bind(m_pListenContext->m_Socket,
		(sockaddr*)&serverAddress, sizeof(serverAddress)))
	{
		this->_ShowMessage("bind()函数执行错误.\n");
		this->_DeInitialize();
		return false;
	}
	else
	{
		this->_ShowMessage("bind() 完成.\n");
	}

	// 开始进行监听
	if (SOCKET_ERROR == listen(m_pListenContext->m_Socket, SOMAXCONN))
	{
		this->_ShowMessage("Listen()函数执行出现错误.\n");
		this->_DeInitialize();
		return false;
	}
	else
	{
		this->_ShowMessage("Listen() 完成.\n");
	}

	// 使用AcceptEx函数，因为这个是属于WinSock2规范之外的微软另外提供的扩展函数
	// 所以需要额外获取一下函数的指针，获取AcceptEx函数指针
	DWORD dwBytes = 0;
	GUID GuidAcceptEx = WSAID_ACCEPTEX;
	GUID GuidGetAcceptExSockAddrs = WSAID_GETACCEPTEXSOCKADDRS;
	if (SOCKET_ERROR == WSAIoctl(m_pListenContext->m_Socket,
		SIO_GET_EXTENSION_FUNCTION_POINTER, &GuidAcceptEx,
		sizeof(GuidAcceptEx), &m_lpfnAcceptEx,
		sizeof(m_lpfnAcceptEx), &dwBytes, NULL, NULL))
	{
		this->_ShowMessage("WSAIoctl 未能获取AcceptEx函数指针。错误代码: %d\n",
			WSAGetLastError());
		this->_DeInitialize();
		return false;
	}

	// 获取GetAcceptExSockAddrs函数指针，也是同理
	if (SOCKET_ERROR == WSAIoctl(m_pListenContext->m_Socket,
		SIO_GET_EXTENSION_FUNCTION_POINTER, &GuidGetAcceptExSockAddrs,
		sizeof(GuidGetAcceptExSockAddrs), &m_lpfnGetAcceptExSockAddrs,
		sizeof(m_lpfnGetAcceptExSockAddrs), &dwBytes, NULL, NULL))
	{
		this->_ShowMessage("WSAIoctl 未能获取GuidGetAcceptExSockAddrs函数指针。"
			"错误代码: %d\n", WSAGetLastError());
		this->_DeInitialize();
		return false;
	}

	// 为AcceptEx 准备参数，然后投递AcceptEx I/O请求
	// 创建10个套接字，投递AcceptEx请求，即共有10个套接字进行accept操作；
	for (size_t i = 0; i < MAX_POST_ACCEPT; i++)
	{
		// 新建一个IO_CONTEXT
		IoContext* pIoContext = m_pListenContext->GetNewIoContext();
		if (pIoContext && !this->_PostAccept(m_pListenContext, pIoContext))
		{
			m_pListenContext->RemoveContext(pIoContext);
			return false;
		}
	}

	this->_ShowMessage("投递 %d 个AcceptEx请求完毕", MAX_POST_ACCEPT);
	return true;
}

////////////////////////////////////////////////////////////
//	最后释放掉所有资源
void CIocpModel::_DeInitialize()
{
	// 删除客户端列表的互斥量
	DeleteCriticalSection(&m_csContextList);
	// 关闭系统退出事件句柄
	RELEASE_HANDLE(m_hShutdownEvent);
	// 释放工作者线程句柄指针
	for (int i = 0; i < m_nThreads; i++)
	{
		RELEASE_HANDLE(m_phWorkerThreads[i]);
	}

	RELEASE_ARRAY(m_phWorkerThreads);
	// 关闭IOCP句柄
	RELEASE_HANDLE(m_hIOCompletionPort);
	// 关闭监听Socket
	RELEASE_POINTER(m_pListenContext);
	this->_ShowMessage("释放资源完毕.\n");
}

//================================================================================
//				 投递完成端口请求
//================================================================================
//////////////////////////////////////////////////////////////////
// 投递Accept请求
bool CIocpModel::_PostAccept(SocketContext* pSocketContext, IoContext* pIoContext)
{
	if (m_pListenContext == NULL || m_pListenContext->m_Socket == INVALID_SOCKET)
	{
		throw "_PostAccept,m_pListenContext or m_Socket INVALID!";
	}
	// 准备参数
	pIoContext->ResetBuffer();
	pIoContext->m_OpType = OPERATION_TYPE::ACCEPT;
	// 为以后新连入的客户端先准备好Socket( 这个是与传统accept最大的区别 ) 
	pIoContext->m_sockAccept = WSASocket(AF_INET, SOCK_STREAM,
		IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED);
	if (INVALID_SOCKET == pIoContext->m_sockAccept)
	{
		_ShowMessage("创建用于Accept的Socket失败！错误代码: %d", WSAGetLastError());
		return false;
	}
	// 将接收缓冲置为0,令AcceptEx直接返回,防止拒绝服务攻击
	//https://docs.microsoft.com/zh-cn/windows/win32/api/mswsock/nf-mswsock-acceptex
	// 投递AcceptEx
	DWORD dwBytes = 0;
	WSABUF* pWSAbuf = &pIoContext->m_wsaBuf;
	if (!m_lpfnAcceptEx(m_pListenContext->m_Socket,
		pIoContext->m_sockAccept, pWSAbuf->buf,
		pWSAbuf->len - ((sizeof(SOCKADDR_IN) + 16) * 2),
		sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16,
		&dwBytes, &pIoContext->m_Overlapped))
	{
		if (WSA_IO_PENDING != WSAGetLastError())
		{
			_ShowMessage("投递 AcceptEx 请求失败，错误代码: %d", WSAGetLastError());
			return false;
		}
	}
	return true;
}

////////////////////////////////////////////////////////////
// 在有客户端连入的时候，进行处理
// 流程有点复杂，你要是看不懂的话，就看配套的文档吧....
// 如果能理解这里的话，完成端口的机制你就消化了一大半了

// 总之你要知道，传入的是ListenSocket的Context，我们需要复制一份出来给新连入的Socket用
// 原来的Context还是要在上面继续投递下一个Accept请求
/********************************************************************
*函数功能：函数进行客户端接入处理；
*参数说明：
SocketContext* pSocketContext:	本次accept操作对应的套接字，该套接字所对应的数据结构；
IoContext* pIoContext:			本次accept操作对应的数据结构；
DWORD		dwIOSize:			本次操作数据实际传输的字节数
********************************************************************/
bool CIocpModel::_DoAccept(SocketContext* pSocketContext, IoContext* pIoContext)
{
	InterlockedDecrement(&acceptedCount);
	InterlockedIncrement(&connectCount);
	if (pIoContext->m_nTotalBytes > 0)
	{
		//客户接入时，第一次接收dwIOSize字节数据
		_DoFirstRecvWithData(pIoContext);
	}
	else
	{
		//客户端接入时，没有发送数据，则投递WSARecv请求，接收数据
		_DoFirstRecvWithoutData(pIoContext);
	}
	// 5. 使用完毕之后，把Listen Socket的那个IoContext重置，然后准备投递新的AcceptEx
	return this->_PostAccept(pSocketContext, pIoContext);
}

/*************************************************************
*函数功能：AcceptEx接收客户连接成功，接收客户第一次发送的数据，故投递WSASend请求
*函数参数：IoContext* pIoContext:	用于监听套接字上的操作
**************************************************************/
bool CIocpModel::_DoFirstRecvWithData(IoContext* pIoContext)
{
	SOCKADDR_IN* clientAddr = NULL, * localAddr = NULL;
	int remoteLen = sizeof(SOCKADDR_IN), localLen = sizeof(SOCKADDR_IN);

	///////////////////////////////////////////////////////////////////////////
	// 1. 首先取得连入客户端的地址信息
	// 这个 m_lpfnGetAcceptExSockAddrs 不得了啊~~~~~~
	// 不但可以取得客户端和本地端的地址信息，还能顺便取出客户端发来的第一组数据，老强大了...
	this->m_lpfnGetAcceptExSockAddrs(pIoContext->m_wsaBuf.buf,
		pIoContext->m_wsaBuf.len - ((sizeof(SOCKADDR_IN) + 16) * 2),
		sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16,
		(LPSOCKADDR*)&localAddr, &localLen, (LPSOCKADDR*)&clientAddr, &remoteLen);
	// 显示客户端信息
	this->_ShowMessage("客户端 %s:%d 连入", inet_ntoa(clientAddr->sin_addr),
		ntohs(clientAddr->sin_port));

	////////////////////////////////////////////////////////////////////////////////
	// 2. 这里需要注意，这里传入的这个是ListenSocket上的Context，
	// 这个Context我们还需要用于监听下一个连接，所以我还得要将ListenSocket
	//	上的Context复制出来一份，为新连入的Socket新建一个SocketContext
	//	为新接入的套接创建SocketContext，并将该套接字绑定到完成端口
	SocketContext* pNewSocketContext = new SocketContext;
	//加入到ContextList中去(需要统一管理，方便释放资源)
	this->_AddToContextList(pNewSocketContext);
	pNewSocketContext->m_Socket = pIoContext->m_sockAccept;
	memcpy(&(pNewSocketContext->m_ClientAddr), clientAddr, remoteLen);
	// 参数设置完毕，将这个Socket和完成端口绑定(这也是一个关键步骤)
	if (!this->_AssociateWithIOCP(pNewSocketContext))
	{//无需RELEASE_POINTER，失败时，已经release了
		// RELEASE_POINTER(pNewSocketContext);
		return false;
	}

	// 3. 继续，建立其下的IoContext，用于在这个Socket上投递第一个Recv数据请求
	IoContext* pNewIoContext = pNewSocketContext->GetNewIoContext();
	pNewIoContext->m_OpType = OPERATION_TYPE::SEND;
	pNewIoContext->m_sockAccept = pNewSocketContext->m_Socket;
	pNewIoContext->m_nTotalBytes = pIoContext->m_nTotalBytes;
	pNewIoContext->m_nSendBytes = 0;
	pNewIoContext->m_wsaBuf.len = pIoContext->m_nTotalBytes;
	memcpy(pNewIoContext->m_wsaBuf.buf, pIoContext->m_wsaBuf.buf,
		pIoContext->m_nTotalBytes);	//复制数据到WSASend函数的参数缓冲区
	//此时是第一次接收数据成功，所以这里投递PostWrite，向客户端发送数据
	if (!this->_PostSend(pNewSocketContext, pNewIoContext)) //这里不应该直接PostWrite
	{// 无需RELEASE_POINTER，失败时，已经release了
		// RELEASE_POINTER(pNewSocketContext);
		return false;
	}
	// 4. 如果投递成功，那么就把这个有效的客户端信息，
	this->OnConnectionAccepted(pNewSocketContext);
	//////////////////////////////////////////////////////////////////////////////////
	// 5. 使用完毕之后，把Listen Socket的那个IoContext重置，然后准备投递新的AcceptEx
	// return this->_PostAccept(pIoContext );
	return true;
}

/*************************************************************
*函数功能：AcceptEx接收客户连接成功，此时并未接收到数据，故投递WSARecv请求
*函数参数：IoContext* pIoContext:	用于监听套接字上的操作
**************************************************************/
bool CIocpModel::_DoFirstRecvWithoutData(IoContext* pIoContext)
{
	//为新接入的套接字创建SocketContext结构，并绑定到完成端口
	SOCKADDR ClientAddr = { 0 };
	int Len = sizeof(ClientAddr);
	getpeername(pIoContext->m_sockAccept, &ClientAddr, &Len);
	SocketContext* pNewSocketContext = new SocketContext;
	//加入到ContextList中去(需要统一管理，方便释放资源)
	this->_AddToContextList(pNewSocketContext);
	pNewSocketContext->m_Socket = pIoContext->m_sockAccept;
	memcpy(&(pNewSocketContext->m_ClientAddr), &ClientAddr, sizeof(SOCKADDR_IN));
	//将该套接字绑定到完成端口
	if (!this->_AssociateWithIOCP(pNewSocketContext))
	{//无需RELEASE_POINTER，失败时，已经release了
		//RELEASE_POINTER(pNewSocketContext);
		return false;
	}
	//投递WSARecv请求，接收数据
	IoContext* pNewIoContext = pNewSocketContext->GetNewIoContext();
	//此时是AcceptEx未接收到客户端第一次发送的数据，
	//所以这里调用PostRecv，接收来自客户端的数据
	if (!this->_PostRecv(pNewSocketContext, pNewIoContext))
	{//无需RELEASE_POINTER，失败时，已经release了
		//RELEASE_POINTER(pNewSocketContext);
		return false;
	}
	//如果投递成功，那么就把这个有效的客户端信息，
	this->OnConnectionAccepted(pNewSocketContext);
	return true;
}

/*************************************************************
*函数功能：投递WSARecv请求；
*函数参数：
IoContext* pIoContext:	用于进行IO的套接字上的结构，主要为WSARecv参数和WSASend参数；
**************************************************************/
bool CIocpModel::_PostRecv(SocketContext* pSocketContext, IoContext* pIoContext)
{
	pIoContext->ResetBuffer();
	pIoContext->m_OpType = OPERATION_TYPE::RECV;
	pIoContext->m_nSendBytes = 0;
	pIoContext->m_nTotalBytes = 0;
	// 初始化变量
	DWORD dwFlags = 0, dwBytes = 0;
	// 初始化完成后，投递WSARecv请求
	const int nBytesRecv = WSARecv(pIoContext->m_sockAccept,
		&pIoContext->m_wsaBuf, 1, &dwBytes, &dwFlags,
		&pIoContext->m_Overlapped, NULL);
	// 如果返回值错误，并且错误的代码并非是Pending的话，那就说明这个重叠请求失败了
	if ((SOCKET_ERROR == nBytesRecv) && (WSA_IO_PENDING != WSAGetLastError()))
	{
		this->_ShowMessage("投递WSARecv失败！err=", WSAGetLastError());
		this->_DoClose(pSocketContext);
		return false;
	}
	return true;
}

/////////////////////////////////////////////////////////////////
// 在有接收的数据到达的时候，进行处理
bool CIocpModel::_DoRecv(SocketContext* pSocketContext, IoContext* pIoContext)
{
	// 先把上一次的数据显示出现，然后就重置状态，发出下一个Recv请求
	SOCKADDR_IN* ClientAddr = &pSocketContext->m_ClientAddr;
	this->_ShowMessage("收到 %s:%d 信息：%s", inet_ntoa(ClientAddr->sin_addr),
		ntohs(ClientAddr->sin_port), pIoContext->m_wsaBuf.buf);
	// 然后开始投递下一个WSARecv请求 //发送数据
	//这里不应该直接PostWrite，发什么应该由应用决定
	this->OnRecvCompleted(pSocketContext, pIoContext);
	return _PostRecv(pSocketContext, pIoContext);
}

/*************************************************************
*函数功能：投递WSASend请求
*函数参数：
IoContext* pIoContext:	用于进行IO的套接字上的结构，主要为WSARecv参数和WSASend参数
*函数说明：调用PostWrite之前需要设置pIoContext中m_wsaBuf, m_nTotalBytes, m_nSendBytes；
**************************************************************/
bool CIocpModel::_PostSend(SocketContext* pSocketContext, IoContext* pIoContext)
{
	// 初始化变量
	////pIoContext->ResetBuffer(); //外部设置m_wsaBuf
	pIoContext->m_OpType = OPERATION_TYPE::SEND;
	//投递WSASend请求 -- 需要修改
	const DWORD dwFlags = 0;
	DWORD dwSendNumBytes = 0;
	const int nRet = WSASend(pIoContext->m_sockAccept,
		&pIoContext->m_wsaBuf, 1, &dwSendNumBytes, dwFlags,
		&pIoContext->m_Overlapped, NULL);
	// 如果返回值错误，并且错误的代码并非是Pending的话，那就说明这个重叠请求失败了
	if ((SOCKET_ERROR == nRet) && (WSA_IO_PENDING != WSAGetLastError()))
	{
		this->_ShowMessage("投递WSASend失败！err=%d", WSAGetLastError());
		return false;
	}
	return true;
}

bool CIocpModel::_DoSend(SocketContext* pSocketContext, IoContext* pIoContext)
{
	this->OnSendCompleted(pSocketContext, pIoContext);
	return 0;
}

bool CIocpModel::_DoClose(SocketContext* pSocketContext)
{
	InterlockedDecrement(&connectCount);
	this->_RemoveContext(pSocketContext);
	return true;
}

/////////////////////////////////////////////////////
// 将句柄(Socket)绑定到完成端口中
bool CIocpModel::_AssociateWithIOCP(SocketContext* pSocketContext)
{
	// 将用于和客户端通信的SOCKET绑定到完成端口中
	HANDLE hTemp = CreateIoCompletionPort((HANDLE)pSocketContext->m_Socket,
		m_hIOCompletionPort, (DWORD)pSocketContext, 0);
	if (nullptr == hTemp)
	{
		this->_ShowMessage("绑定IOCP失败。err=%d", GetLastError());
		this->_DoClose(pSocketContext);
		return false;
	}
	return true;
}

//=====================================================================
//				 ContextList 相关操作
//=====================================================================
//////////////////////////////////////////////////////////////
// 将客户端的相关信息存储到数组中
void CIocpModel::_AddToContextList(SocketContext* pSocketContext)
{
	EnterCriticalSection(&m_csContextList);
	m_arrayClientContext.push_back(pSocketContext);
	LeaveCriticalSection(&m_csContextList);
}

////////////////////////////////////////////////////////////////
//	移除某个特定的Context
void CIocpModel::_RemoveContext(SocketContext* pSocketContext)
{
	EnterCriticalSection(&m_csContextList);
	vector<SocketContext*>::iterator it;
	it = m_arrayClientContext.begin();
	while (it != m_arrayClientContext.end())
	{
		SocketContext* pContext = *it;
		if (pSocketContext == pContext)
		{
			delete pSocketContext;
			pSocketContext = nullptr;
			it = m_arrayClientContext.erase(it);
			break;
		}
		it++;
	}
	LeaveCriticalSection(&m_csContextList);
}

////////////////////////////////////////////////////////////////
// 清空客户端信息
void CIocpModel::_ClearContextList()
{
	EnterCriticalSection(&m_csContextList);
	for (size_t i = 0; i < m_arrayClientContext.size(); i++)
	{
		delete m_arrayClientContext.at(i);
	}
	m_arrayClientContext.clear();
	LeaveCriticalSection(&m_csContextList);
}

//================================================================================
//				 其他辅助函数定义
//================================================================================
////////////////////////////////////////////////////////////////////
// 获得本机的IP地址
string CIocpModel::GetLocalIP()
{
	// 获得本机主机名
	char hostname[MAX_PATH] = { 0 };
	gethostname(hostname, MAX_PATH);
	struct hostent FAR* lpHostEnt = gethostbyname(hostname);
	if (lpHostEnt == NULL)
	{
		return DEFAULT_IP;
	}
	// 取得IP地址列表中的第一个为返回的IP(因为一台主机可能会绑定多个IP)
	const LPSTR lpAddr = lpHostEnt->h_addr_list[0];
	// 将IP地址转化成字符串形式
	struct in_addr inAddr;
	memmove(&inAddr, lpAddr, 4);
	m_strIP = string(inet_ntoa(inAddr));
	return m_strIP;
}

///////////////////////////////////////////////////////////////////
// 获得本机中处理器的数量
int CIocpModel::_GetNumOfProcessors() noexcept
{
	SYSTEM_INFO si;
	GetSystemInfo(&si);
	return si.dwNumberOfProcessors;
}

/////////////////////////////////////////////////////////////////////
// 判断客户端Socket是否已经断开，否则在一个无效的Socket上投递WSARecv操作会出现异常
// 使用的方法是尝试向这个socket发送数据，判断这个socket调用的返回值
// 因为如果客户端网络异常断开(例如客户端崩溃或者拔掉网线等)的时候，
// 服务器端是无法收到客户端断开的通知的
bool CIocpModel::_IsSocketAlive(SOCKET s) noexcept
{
	const int nByteSent = send(s, "", 0, 0);
	if (SOCKET_ERROR == nByteSent)
	{
		return false;
	}
	else
	{
		return true;
	}
}

///////////////////////////////////////////////////////////////////
//函数功能：显示并处理完成端口上的错误
bool CIocpModel::HandleError(SocketContext* pSocketContext, const DWORD& dwErr)
{
	// 如果是超时了，就再继续等吧 
	if (WAIT_TIMEOUT == dwErr)
	{
		// 确认客户端是否还活着...
		if (!_IsSocketAlive(pSocketContext->m_Socket))
		{
			this->_ShowMessage("检测到客户端异常退出！");
			this->OnConnectionClosed(pSocketContext);
			this->_DoClose(pSocketContext);
			return true;
		}
		else
		{
			this->_ShowMessage("网络操作超时！重试中...");
			return true;
		}
	}
	// 可能是客户端异常退出了
	else if (ERROR_NETNAME_DELETED == dwErr)
	{
		this->_ShowMessage("检测到客户端异常退出！");
		this->OnConnectionError(pSocketContext, dwErr);
		this->_DoClose(pSocketContext);
		return true;
	}
	else
	{
		this->_ShowMessage("完成端口操作出现错误，线程退出。错误代码：%d", dwErr);
		this->OnConnectionError(pSocketContext, dwErr);
		this->_DoClose(pSocketContext);
		return false;
	}
}

/////////////////////////////////////////////////////////////////////
// 在主界面中显示提示信息
void CIocpModel::_ShowMessage(const char* szFormat, ...)
{
	if (m_LogFunc)
	{
		char buff[256] = { 0 };
		va_list arglist;
		// 处理变长参数
		va_start(arglist, szFormat);
		vsnprintf(buff, sizeof(buff), szFormat, arglist);
		va_end(arglist);

		m_LogFunc(string(buff));
	}
}
